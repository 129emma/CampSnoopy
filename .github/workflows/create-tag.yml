name: create-tag-on-merge

on:
  push:
    branches:
      - main

jobs:
  create-tag:
    # Skip if the push is from changelog merge (contains [skip ci])
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.create_tag.outputs.new_tag }}

    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
  
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
            version: '9'
  
      - name: Install dependencies
        run: pnpm install

      - name: Create test tag
        id: create_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run semantic-release and capture output
          OUTPUT=$(pnpm semantic-release --prerelease --dry-run)
          
           # Get the version that was just released
          LATEST_VERSION=$(grep "Published release" release.log | awk '{print $3}' | head -n1 || echo "unknown")
          echo "Next version: $LATEST_VERSION"
          
          # Get short SHA
          SHORT_SHA=$(git rev-parse --short HEAD)
          
          # Create new tag
          NEW_TAG="test/v${LATEST_VERSION}-rc-${SHORT_SHA}"
          git tag $NEW_TAG
          git push origin $NEW_TAG
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "Created and pushed new tag: $NEW_TAG"