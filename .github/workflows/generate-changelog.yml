name: generate-changelog

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  generate-changelog:
    name: generate-changelog
    if: inputs.environment == 'prod' || inputs.environment == 'uat'
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.changelog.outputs.version }}
    steps:
      - name: 'Generate token'
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: '9'

      - name: Install dependencies
        run: pnpm install

      - name: Debug - Print Branch Info
        run: |
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Git HEAD: $(git rev-parse HEAD)"
          echo "All branches:"
          git branch -a

      - name: Generate CHANGELOG
        id: changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRERELEASE: ${{ inputs.environment == 'uat' }}
        run: |
          # Store current HEAD commit hash
          CURRENT_SHA=$(git rev-parse HEAD)
          
          # Create and push temporary branch from current HEAD
          git checkout -b temp-release-branch-${{ github.sha }} $CURRENT_SHA
          git push origin temp-release-branch-${{ github.sha }}
          
          # Verify the branch is at the correct commit
          if [ "$(git rev-parse HEAD)" != "$CURRENT_SHA" ]; then
            echo "Error: Branch is not at the expected commit"
            exit 1
          fi
          
          if [ "$PRERELEASE" = "true" ]; then
            pnpm semantic-release --prerelease --branches temp-release-branch-${{ github.sha }} | tee release.log
          else
            pnpm semantic-release --branches temp-release-branch-${{ github.sha }} | tee release.log
          fi
          
           # Get the version that was just released
          LATEST_VERSION=$(grep "Published release" release.log | awk '{print $3}' | head -n1 || echo "unknown")
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          # If semantic-release made changes, copy them to main
          if git diff --quiet; then
            echo "No changes made by semantic-release"
          else
            # Configure git user for merge commit
            git config --global user.email "SnoopyCamp[bot]@users.noreply.github.com"
            git config --global user.name "SnoopyCamp"
            
            # Get the changes from temporary branch
            git checkout main
            RELEASE_TYPE=$([ "$PRERELEASE" = "true" ] && echo "UAT" || echo "production")
            
            git merge --no-ff temp-release-branch-${{ github.sha }} -m "chore(release): merge ${RELEASE_TYPE} changelog updates for version v${LATEST_VERSION} [skip ci]"
            git push origin main
          fi
          
          # Clean up: Delete both local and remote temp branches
          git branch -D temp-release-branch-${{ github.sha }}
          git push origin --delete temp-release-branch-${{ github.sha }}

  create-release:
    needs: generate-changelog
    if: needs.generate-changelog.outputs.version != ''
    uses: ./.github/workflows/create-github-release.yml
    with:
      version: ${{ needs.generate-changelog.outputs.version }}
      environment: ${{ inputs.environment }}
    secrets: inherit
