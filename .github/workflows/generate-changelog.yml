name: generate-changelog

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  generate-changelog:
    name: generate-changelog
    if: inputs.environment == 'prod' || inputs.environment == 'uat'
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Generate token'
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: '9'

      - name: Install dependencies
        run: pnpm install

      - name: Extract version from test tag
        id: get_version
        run: |
          # Extract version from the test tag (test/vX.Y.Z-rc-*)
          VERSION=$(echo ${{ github.ref_name }} | sed -E 's/test\/v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create prod tag
        if: inputs.environment == 'prod'
        run: |
          NEW_TAG="prod/v${{ steps.get_version.outputs.version }}"
          git tag $NEW_TAG
          git push origin $NEW_TAG
          echo "Created and pushed new tag: $NEW_TAG"

      - name: Generate Release Documentation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.get_version.outputs.version }}
          PRERELEASE: ${{ inputs.environment == 'uat' }}
        run: |
          # Create a temporary branch from the current commit
          git checkout -b temp-release-branch
          
          if [ "$PRERELEASE" = "true" ]; then
            pnpm semantic-release --prerelease --no-ci --branches temp-release-branch
          else
            pnpm semantic-release --no-ci --branches temp-release-branch
          fi
          
          # Clean up: Switch back to previous branch and delete temp branch
          git checkout -
          git branch -D temp-release-branch