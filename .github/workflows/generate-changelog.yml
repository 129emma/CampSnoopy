name: generate-changelog

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  generate-changelog:
    name: generate-changelog
    if: inputs.environment == 'prod' || inputs.environment == 'uat'
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.changelog.outputs.version }}
    steps:
      - name: 'Generate token'
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: '9'

      - name: Install dependencies
        run: pnpm install

      - name: Debug - Print Branch Info
        run: |
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Git HEAD: $(git rev-parse HEAD)"
          echo "All branches:"
          git branch -a

      - name: Generate CHANGELOG
        id: changelog
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          PRERELEASE: ${{ inputs.environment == 'uat' }}
        run: |
          # Enhanced debugging
          echo "=== Initial Git State ==="
          echo "GitHub SHA: ${{ github.sha }}"
          echo "GitHub REF: ${{ github.ref }}"
          echo "GitHub REF_NAME: ${{ github.ref_name }}"
          echo "Current HEAD: $(git rev-parse HEAD)"
          
          # Create a new branch from the current commit
          TEMP_BRANCH="temp-release-branch-${{ github.sha }}"
          echo "Creating temporary branch: $TEMP_BRANCH"
          
          # Force create branch at current commit and set upstream
          git switch -c $TEMP_BRANCH
          git push -u origin $TEMP_BRANCH
          
          # Ensure we're on the branch and not in a detached HEAD state
          git checkout $TEMP_BRANCH
          
          echo "=== Current Git State ==="
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          git status
          
          # Run semantic-release with explicit environment variables
          echo "=== Running semantic-release ==="
          if [ "$PRERELEASE" = "true" ]; then
            echo "Running in prerelease mode"
            # Create a temporary file for the full output
            GIT_LOCAL_BRANCH=$TEMP_BRANCH \
            GITHUB_REF=refs/heads/$TEMP_BRANCH \
            pnpm semantic-release \
              --debug \
              --prerelease \
              --no-ci \
              > >(tee release.log) 2>&1 || {
                echo "=== Error running semantic-release ==="
                cat release.log
                exit 1
              }
          else
            echo "Running in release mode"
            GIT_LOCAL_BRANCH=$TEMP_BRANCH \
            GITHUB_REF=refs/heads/$TEMP_BRANCH \
            pnpm semantic-release \
              --debug \
              --no-ci \
              > >(tee release.log) 2>&1 || {
                echo "=== Error running semantic-release ==="
                cat release.log
                exit 1
              }
          fi

          echo "=== semantic-release output ==="
          cat release.log
          
          # Get the version that was just released
          LATEST_VERSION=$(grep "Published release" release.log | sed -E 's/.*Published release ([0-9]+\.[0-9]+\.[0-9]+).*$/\1/' || echo "")
          echo "Released version: $LATEST_VERSION"
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          if [ -z "$LATEST_VERSION" ]; then
            echo "No version was published"
            exit 0
          fi
          
          # If semantic-release made changes, copy them to main
          if git diff --quiet; then
            echo "No changes made by semantic-release"
          else
            echo "=== Applying Changes to Main ==="
            git config --global user.email "SnoopyCamp[bot]@users.noreply.github.com"
            git config --global user.name "SnoopyCamp"
            
            # Fetch latest main
            git fetch origin main
            
            # Switch to main and ensure it's up to date
            git checkout main
            git pull origin main
            
            RELEASE_TYPE=$([ "$PRERELEASE" = "true" ] && echo "UAT" || echo "production")
            
            # Use the bot token for pushing
            git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
            
            # Merge changes
            git merge --no-ff $TEMP_BRANCH -m "chore(release): merge ${RELEASE_TYPE} changelog updates for version v${LATEST_VERSION} [skip ci]"
            git push origin main
          fi
          
          # Clean up - ensure we're not on the branch we're trying to delete
          echo "=== Cleanup ==="
          git checkout main
          git push origin --delete $TEMP_BRANCH || echo "Failed to delete remote branch: $TEMP_BRANCH"
          git branch -D $TEMP_BRANCH || echo "Failed to delete local branch: $TEMP_BRANCH"

  create-release:
    needs: generate-changelog
    if: needs.generate-changelog.outputs.version != ''
    uses: ./.github/workflows/create-github-release.yml
    with:
      version: ${{ needs.generate-changelog.outputs.version }}
      environment: ${{ inputs.environment }}
    secrets: inherit
