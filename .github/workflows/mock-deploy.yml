name: mock-deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: environment to deploy to
        required: true
        type: choice
        default: uat
        options:
          - dev
          - uat
          - prod
      releaseType:
        description: release type to deploy
        required: true
        type: choice
        default: semantic
        options:
          - semantic
          - release-please

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  get-deployed-tag:
    runs-on: ubuntu-latest
    outputs:
      deployed_tag: ${{ steps.get-tag.outputs.deployed_tag }}
      should_deploy: ${{ steps.compare-tags.outputs.should_deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Get Latest Deployment
        id: get-tag
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          
          DEPLOYMENT=$(gh api \
            repos/${{ github.repository }}/deployments \
            --jq ".[0] | select(.environment == \"${{ inputs.environment }}\" and .state == \"success\") | .ref")
          
          if [ -z "$DEPLOYMENT" ]; then
            echo "No previous deployment found for ${{ inputs.environment }}"
            echo "deployed_tag=v0.0.0" >> $GITHUB_OUTPUT
          else
            echo "deployed_tag=${DEPLOYMENT}" >> $GITHUB_OUTPUT
          fi
          echo "Current deployed tag in ${{ inputs.environment }}: ${DEPLOYMENT:-none}"

      - name: Compare Tags
        id: compare-tags
        run: |
          DEPLOYED_TAG="${{ steps.get-tag.outputs.deployed_tag }}"
          RELEASE_TAG="${{ github.ref_name }}"
          
          if [ "$DEPLOYED_TAG" = "v0.0.0" ]; then
            echo "‚úÖ First deployment to environment"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract versions for comparison
          get_version() {
            # Updated regex to handle test/vX.Y.Z-rc-hash format
            echo "$1" | sed -E 's/.*v([0-9]+\.[0-9]+\.[0-9]+).*/\1/'
          }
          
          # Clean the tags to handle test/vX.Y.Z-rc-hash format
          DEPLOYED_VERSION=$(get_version "$DEPLOYED_TAG")
          RELEASE_VERSION=$(get_version "$RELEASE_TAG")
          
          echo "Comparing versions:"
          echo "Deployed version: $DEPLOYED_VERSION"
          echo "Release version: $RELEASE_VERSION"
          
          if [ "$(printf '%s\n' "$RELEASE_VERSION" "$DEPLOYED_VERSION" | sort -V | head -n1)" = "$RELEASE_VERSION" ]; then
            echo "‚ö†Ô∏è Warning: Release version ($RELEASE_VERSION) is older than or equal to deployed version ($DEPLOYED_VERSION)"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Release version ($RELEASE_VERSION) is newer than deployed version ($DEPLOYED_VERSION)"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi

  mock-deploy:
    needs: [get-deployed-tag]
    if: needs.get-deployed-tag.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: release 

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Mock Build Process
        run: |
          echo "üèóÔ∏è Building application..."
          echo "Building version: ${{ github.ref_name }}"
          echo "‚úÖ Build completed"

      - name: Mock Tests
        run: |
          echo "üß™ Running tests..."
          echo "Testing version: ${{ github.ref_name }}"
          echo "‚úÖ Tests passed"

      - name: Mock Deploy
        run: |
          echo "üöÄ Deploying version ${{ github.ref_name }} to ${{ inputs.environment }}..."
          echo "‚úÖ Deployment completed"

  semantic-release:
    needs: mock-deploy
    if: |
      inputs.releaseType == 'semantic' && 
      (inputs.environment == 'prod' || inputs.environment == 'uat')
    uses: ./.github/workflows/generate-changelog.yml
    with:
      environment: ${{ inputs.environment }}
    secrets: inherit

  release-please:
    needs: mock-deploy
    if: |
      inputs.releaseType == 'release-please' && 
      (inputs.environment == 'prod' || inputs.environment == 'uat')
    uses: ./.github/workflows/release-please.yml
    with:
      environment: ${{ inputs.environment }}
    secrets: inherit
    permissions:
      contents: write
      pull-requests: write

  create-github-release:
    needs: [semantic-release, release-please]
    if: |
      always() &&
      (needs.semantic-release.result == 'success' || needs.release-please.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Read CHANGELOG.md
        id: changelog
        run: |
          CHANGELOG_CONTENT=$(cat CHANGELOG.md)
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get Version from Tag
        id: version
        run: |
          # Updated regex to handle test/vX.Y.Z-rc-hash format
          VERSION=$(echo ${{ github.ref_name }} | sed -E 's/.*v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get Commit Hashes
        id: hashes
        run: |
          MAIN_HASH=$(git rev-parse origin/main)
          RELEASE_HASH=${{ github.sha }}
          echo "main_hash=$MAIN_HASH" >> $GITHUB_OUTPUT
          echo "release_hash=$RELEASE_HASH" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_NOTES="## Commit Information\n"
          RELEASE_NOTES+="- Main Branch: ${{ steps.hashes.outputs.main_hash }}\n"
          RELEASE_NOTES+="- Release: ${{ steps.hashes.outputs.release_hash }}\n\n"
          RELEASE_NOTES+="## Changelog\n"
          RELEASE_NOTES+="${{ steps.changelog.outputs.content }}"
          
          gh release create "v${{ steps.version.outputs.version }}" \
            --title "Release v${{ steps.version.outputs.version }}" \
            --notes "$RELEASE_NOTES" \
            --hash ${{ steps.hashes.outputs.release_hash }}